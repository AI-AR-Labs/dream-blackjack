name: AI Development Workflow V2

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to work on'
        required: true
        type: number

jobs:
  ai-development:
    if: github.event.label.name == 'ai-ready' || github.event_name == 'workflow_dispatch'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Update from latest master
        run: |
          git fetch origin master
          git reset --hard origin/master
      
      - name: Install Node dependencies
        run: npm ci
      
      - name: Extract Issue Details
        id: issue
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number || github.event.inputs.issue_number }}
        run: |
          # Use direct API call with BOT_TOKEN
          RESPONSE=$(curl -s -H "Authorization: token $BOT_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
          
          # Extract issue data
          ISSUE_TITLE=$(echo "$RESPONSE" | jq -r '.title')
          ISSUE_BODY=$(echo "$RESPONSE" | jq -r '.body')
          
          # Extract acceptance criteria
          CRITERIA=$(echo "$ISSUE_BODY" | awk '/## Acceptance Criteria/{flag=1; next} /^##/{flag=0} flag')
          
          # Save to files
          echo "Issue #$ISSUE_NUMBER: $ISSUE_TITLE" > issue-context.txt
          echo "" >> issue-context.txt
          echo "$ISSUE_BODY" >> issue-context.txt
          echo "$CRITERIA" > acceptance-criteria.txt
          
          # Set outputs
          echo "criteria<<EOF" >> $GITHUB_OUTPUT
          echo "$CRITERIA" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Create Feature Branch
        run: |
          BRANCH_NAME="feature/issue-${{ steps.issue.outputs.issue_number }}"
          git checkout -b $BRANCH_NAME
          
      - name: Generate Tests with Claude
        run: |
          # Get acceptance criteria
          CRITERIA=$(cat acceptance-criteria.txt)
          
          # Build the prompt
          PROMPT="Generate comprehensive tests for the following acceptance criteria:

          ${CRITERIA}

          Create a new test file at tests/feature.test.js that tests this functionality.
          The tests should fail initially since no implementation exists yet."
          
          # Add example test if it exists
          if [ -f "tests/example.test.js" ]; then
            PROMPT="${PROMPT}

          Here's an example test file for reference:
          $(cat tests/example.test.js)"
          fi
          
          PROMPT="${PROMPT}

          IMPORTANT: Use the Write tool to create the test file. Don't just output the code, actually create the file at tests/feature.test.js"
          
          # Run Claude to generate tests
          claude --dangerously-skip-permissions "$PROMPT"
          
      - name: Implement Feature with Claude
        run: |
          # Get acceptance criteria and test output
          CRITERIA=$(cat acceptance-criteria.txt)
          TEST_OUTPUT=$(npm test 2>&1 || true)
          
          # Build the prompt
          PROMPT="Implement the feature to make all tests pass.

          Acceptance criteria:
          ${CRITERIA}

          Current test output:
          ${TEST_OUTPUT}"
          
          # Add current source if exists
          if [ -f "src/index.js" ]; then
            PROMPT="${PROMPT}

          Current src/index.js:
          $(cat src/index.js)"
          fi
          
          PROMPT="${PROMPT}

          Analyze the failing tests and implement the minimal code needed to make them pass.
          Use the Edit or Write tool to modify src/index.js or create new files as needed.
          Follow the project conventions in CLAUDE.md.

          IMPORTANT: Use the Edit/Write tools to actually modify the files. Don't just output code."
          
          # Run Claude to implement the feature
          claude --dangerously-skip-permissions "$PROMPT"
          
      - name: Run Final Tests
        run: npm test
        
      - name: Generate Test Report
        if: always()
        run: npm run test:coverage -- --json --outputFile=test-results.json
        
      - name: Commit Changes
        run: |
          git config user.email "robottonik@users.noreply.github.com"
          git config user.name "robottonik"
          git add -A
          git commit -m "Implement feature for issue #${{ steps.issue.outputs.issue_number }}"
          
      - name: Push Changes
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          git remote set-url origin https://robottonik:${BOT_TOKEN}@github.com/${{ github.repository }}.git
          git push origin "feature/issue-${{ steps.issue.outputs.issue_number }}"
          
      - name: Deploy to Dev Environment
        id: deploy
        run: |
          # Deploy to dev environment and get URL
          echo "deployment_url=https://dev-${{ steps.issue.outputs.issue_number }}.example.com" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          # Create PR using direct API call
          PR_BODY=$(cat << 'EOF'
          ## Summary
          Implemented feature as requested in issue #${{ steps.issue.outputs.issue_number }}
          
          ## Test Results
          All tests passing âœ…
          [View test report](./test-results.json)
          
          ## Deployment
          ðŸš€ [Dev deployment](${{ steps.deploy.outputs.deployment_url }})
          
          ## Acceptance Criteria
          ${{ steps.issue.outputs.criteria }}
          
          ---
          *This PR was automatically generated by Claude*
          EOF
          )
          
          # Create the PR
          curl -X POST \
            -H "Authorization: token ${BOT_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d @- << EOF
          {
            "title": "Implement feature for issue #${{ steps.issue.outputs.issue_number }}",
            "body": "${PR_BODY}",
            "head": "feature/issue-${{ steps.issue.outputs.issue_number }}",
            "base": "master"
          }
          EOF